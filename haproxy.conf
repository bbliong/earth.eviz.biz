# from https://www.exratione.com/2012/12/websockets-over-ssl-haproxy-nodejs-nginx/
# and http://stackoverflow.com/questions/13227544/haproxy-redirecting-http-to-https-ssl
#
global
  ca-base /home/hon/www
  crt-base /home/hon/www
  maxconn 100
  spread-checks 50
# just 1 non-daemon haproxy process with stderr & stdout > non-syslog file
  nbproc 1
# daemon
 
defaults
# mode http
# option http-server-close
# Add x-forwarded-for header.
# option forwardfor
  maxconn 100
  log global
  retries 10
# 3s timeouts may help prevent DOS attacks, but cause occaional HTTP 408 and 504 timeout errors
# so try 10s:
  timeout http-request 10s
  timeout connect 10s
  timeout client 20s
  timeout server 20s
  # Long timeout for WebSocket connections.
  timeout tunnel 1h
  option dontlognull
 
#
# from https://www.exratione.com/2012/12/websockets-over-ssl-haproxy-nodejs-nginx
# and http://stackoverflow.com/questions/13227544/haproxy-redirecting-http-to-https-ssl
# and http://nbevans.wordpress.com/2011/03/03/cultural-learnings-of-ha-proxy-for-make-benefit
# and http://comments.gmane.org/gmane.comp.web.haproxy/5888
# perhaps use this joiner: https://github.com/joewilliams/haproxy_join
#
userlist honsys
  group users
  user guest insecure-password anonanon groups users

# redirect public http to secured -- iptables nat set to redirect 80 to 9080 and 443 to 9443
#
frontend public
  mode http
# mode tcp  
  bind :9080
# Redirect all HTTP traffic to HTTPS
  redirect scheme https if !{ ssl_fc }
 
# HTTPS -- note cacert key first item in this file, followed by private key...
# haproxy is ok with this but not the reverse?
  bind :9443 ssl crt conf/honsys.comGeoTrustCAcertificate_and_PrivateKey.pem

# authenticate user in frontend
  acl auth_users http_auth_group(honsys) users
  http-request auth realm users if !auth_users

########################  redirects #######################

# solr search (as tomcat jee webapp) behaves better in its own container 
# acl use_tomcat70 hdr_end(host) -i search.1-percent.us
# acl use_tomcat70 hdr_end(host) -i solr.1-percent.us
# acl use_tomcat70 hdr_end(host) -i search.redmjne.org
# acl use_tomcat70 hdr_end(host) -i solr.redmjne.org
# use_backend tomcat70 if use_tomcat70

# cesium == earth & nearby viz. nodejs app: 
# acl use_cesium hdr_end(host) -i cesium.redmjne.org
# acl use_cesium hdr_end(host) -i cesium.earthlimb.net
# acl use_cesium hdr_end(host) -i earthlimb.net
# acl use_cesium hdr_end(host) -i sciviz.earthlimb.net
# use_backend cesium if use_cesium

# etherpad-lite settings.json edited for ssl honsys cacert
# acl use_epad hdr_end(host) -i epad.1-percent.us
# acl use_epad hdr_end(host) -i epad.earthlimb.net
# acl use_epad hdr_end(host) -i epad.redmjne.org
# use_backend etherpad if use_epad

# comparison of leaflet and openlayers-3 with websocket 
  acl use_eviz hdr_end(host) -i earthlimb.net
  acl use_leaf hdr_end(host) -i leaf.earthlimb.net
  acl use_ol3 hdr_end(host) -i ol3.earthlimb.net
  use_backend eviz if use_eviz
  use_backend eviz if use_leaf
  redirect location https://earthlimb.net/leaflet if use_leaf
  use_backend eviz if use_ol3
  redirect location https://earthlimb.net/openlayers if use_ol3

# haproxy stats & admin page also setup for ssl honsys cacert
  acl use_stats hdr_end(host) -i stats.1-percent.us
  acl use_stats hdr_end(host) -i stats.earthlimb.net
  acl use_stats hdr_end(host) -i stats.redmjne.org
  use_backend stats if use_stats

# in principle there's no need to call-out tomcat webapps for the default backend
# acl use_tomcat80 hdr_end(host) -i redmjne.org
# acl use_tomcat80 hdr_end(host) -i eviz.redmjne.org
# use_backend tomcat80 if use_tomcat80
# services provided by various wars (redmjne, hudson, etc.) 
# are webapps in the default backen tomcat (8080)
  default_backend tomcat80

#
######################## end frontends #####################
#
#---------------------------------------------------------------------  
# balancing across the various backends  
#---------------------------------------------------------------------  
#
# evidently backend names can be congruent with frontend names:
backend stats
  mode http
# mode tcp
  stats enable
  stats hide-version
  stats uri /
  stats admin if TRUE
# 
# assume auth performed by frontend ...
# aeuthentication realm. This can be set to anything. Escape space characters with a backslash.
# stats realm HAProxy\ Statistics 
# user/pass you want to use. 
# stats auth hon:golddog
# allows one to take down and bring up back end servers.

#---------------------------------------------------------------------  
# balancing across the various backends  
#---------------------------------------------------------------------  
#
# evidently backend names can be congruent with frontend names:
 
backend eviz
  mode http
# mode tcp
# try to tell the backend that this is a secure connection,
# even though it may be getting plain HTTP.
  reqadd X-Forwarded-Proto:\ https
# balance roundrobin  
  balance leastconn
# check by hitting a page intended for this use.
# option httpchk GET /isrunning
  timeout check 5000ms
# wait 5.0 sec. between checks.
  server eviz9000 127.0.0.1:9000 check inter 5000ms
 
#backend cesium
# mode http
# mode tcp
# try to tell the backend that this is a secure connection,
# even though it may be getting plain HTTP.
# reqadd X-Forwarded-Proto:\ https
# balance roundrobin  
# balance leastconn
# check by hitting a page intended for this use.
# option httpchk GET /isrunning
# timeout check 5000ms
# wait 5.0 sec. between checks.
# server cesium9010 127.0.0.1:9010 check inter 5000ms
# server cesium9011 127.0.0.1:9011 check inter 5000ms

backend tomcat80
# use 8080 for default backend production wars (redmjne.org, scm.whatev, ci.whatev, etc.)
# mode tcp
  mode http
# try to tell the backend that this is a secure connection,
# even though it may be getting plain HTTP.
  reqadd X-Forwarded-Proto:\ https
  balance leastconn
# check by hitting a page intended for this use.
# option httpchk GET /isrunning
# wait 5.0 sec. between checks.
  timeout check 5000ms
  server  catalina8080 127.0.0.1:8080 check inter 5000ms 
# server  catalina8081 127.0.0.1:8081 check inter 5000ms 

